import os
from flask import Flask, render_template, request
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager # type: ignore
from flask_migrate import Migrate
from werkzeug.middleware.proxy_fix import ProxyFix

db = SQLAlchemy()
migrate = Migrate()
login_manager = LoginManager()
login_manager.login_view = "auth.login"

# –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ Flask-Login
login_manager.login_message = "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ."
login_manager.login_message_category = "warning"


def create_app():
    app = Flask(__name__)
    app.wsgi_app = ProxyFix(app.wsgi_app)

    app.config["SECRET_KEY"] = os.environ.get("SECRET_KEY", "dev-secret-key-change-me")
    BASE_DIR = os.path.abspath(os.path.dirname(__file__))
    app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///" + os.path.join(os.path.dirname(BASE_DIR), "videos.db")
    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False

    app.config["UPLOAD_FOLDER"] = os.path.join(os.path.dirname(BASE_DIR), "uploads")
    app.config["MAX_CONTENT_LENGTH"] = int(os.environ.get("UPLOAD_MAX_MB", "200")) * 1024 * 1024
    app.config["ALLOWED_EXTENSIONS"] = set(os.environ.get("ALLOWED_EXTENSIONS", "mp4,mov,webm,mkv").split(","))

    os.makedirs(app.config["UPLOAD_FOLDER"], exist_ok=True)

    # ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    db.init_app(app)
    migrate.init_app(app, db)
    login_manager.init_app(app)

    # üìå –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–ª—é–ø—Ä–∏–Ω—Ç—ã
    from .routes import bp as main_bp
    from .auth import bp as auth_bp
    app.register_blueprint(main_bp)
    app.register_blueprint(auth_bp, url_prefix="/auth")

    # ==============================
    # üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    # ==============================
    @app.errorhandler(404)
    def page_not_found(e):
        return render_template("404.html"), 404

    @app.errorhandler(500)
    def internal_error(e):
        return render_template("500.html"), 500

    @app.errorhandler(403)
    def forbidden(e):
        return render_template("403.html"), 403

    # ==============================
    # üîπ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    # ==============================
    @app.after_request
    def add_cache_headers(response):
        """
        –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–µ—à–∞ –¥–ª—è —Å—Ç–∞—Ç–∏–∫–∏ –∏ –º–µ–¥–∏–∞
        """
        # –°—Ç–∞—Ç–∏–∫–∞ (CSS, JS, –∫–∞—Ä—Ç–∏–Ω–∫–∏, –æ–±–ª–æ–∂–∫–∏)
        if "static" in request.path or "thumbnails" in request.path:
            response.headers["Cache-Control"] = "public, max-age=2592000"  # 30 –¥–Ω–µ–π

        # –í–∏–¥–µ–æ
        if "uploads" in request.path:
            response.headers["Cache-Control"] = "public, max-age=604800"  # 7 –¥–Ω–µ–π

        return response

    return app
